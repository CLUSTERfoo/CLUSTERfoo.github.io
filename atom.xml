<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://clusterfoo.com/</id>
  <title>CLUSTERfoo.com</title>
  <updated>2015-02-22T05:00:00Z</updated>
  <link rel="alternate" href="http://clusterfoo.com/"/>
  <link rel="self" href="http://clusterfoo.com/atom.xml"/>
  <author>
    <name>Noam Gagliardi</name>
    <uri>http://CLUSTERfoo.com</uri>
  </author>
  <entry>
    <id>tag:clusterfoo.com,2015-02-22:/writings/stones/</id>
    <title type="html">Stones</title>
    <published>2015-02-22T05:00:00Z</published>
    <updated>2015-02-22T05:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/writings/stones/"/>
    <content type="html">&lt;p&gt;I was at the lake last Summer. I picked a mossy old bench to sit,
when a group of adolescents gathered to throw stones into the water.
For an hour they busied around, making loud gestures and arguing
over whose stone made the bigger splash.
They would try every which angle, and then
bicker about which one spattered out the widest, or which one sent the water
flying the highest, and how could they agree on what they’d seen if in a moment
it was gone? Finally they approached me hoping I would settle their dispute,
but I had not seen the water splash– they scoffed, frustrated, and went
on their way, and I was free to continue watching the intricate ripples that now
adorned the surface of the lake.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&amp;lt;Feb 2015&amp;gt;&lt;/small&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:clusterfoo.com,2014-08-04:/quick-guides/javascript_traits/</id>
    <title type="html">A Simple Implementation of Trait Mixins for Javascript</title>
    <published>2014-08-04T04:00:00Z</published>
    <updated>2014-08-04T04:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/quick-guides/javascript_traits/"/>
    <content type="html">&lt;p&gt;The method I use
in development is a bit different from what I wrote here for brevity’s sake, 
since it allows for inheritance among traits,
and includes various checks to avoid clashes; but the concept is the same.&lt;/p&gt;

&lt;p&gt;The basic idea is to make constructors “traitable”:&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt; &lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;/**&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt; * Traitable constructors all respond to a common API.&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt; * For example, `foo.registerType()`.&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt; */&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;makeTraitable&lt;/span&gt;(_this, _constructor) {
&lt;span class="line-numbers"&gt; &lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;    _this.traits = [];
&lt;span class="line-numbers"&gt; &lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;&lt;/span&gt;    
&lt;span class="line-numbers"&gt; &lt;a href="#n8" name="n8"&gt;8&lt;/a&gt;&lt;/span&gt;    _constructor.prototype.&lt;span style="color:#06B;font-weight:bold"&gt;is&lt;/span&gt; = &lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; (trait) {
&lt;span class="line-numbers"&gt; &lt;a href="#n9" name="n9"&gt;9&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#080;font-weight:bold"&gt;if&lt;/span&gt; (_this.traits.indexOf(trait) !== -&lt;span style="color:#00D"&gt;1&lt;/span&gt;) &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; &lt;span style="color:#069"&gt;true&lt;/span&gt;;
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n10" name="n10"&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; &lt;span style="color:#069"&gt;false&lt;/span&gt;;
&lt;span class="line-numbers"&gt;&lt;a href="#n11" name="n11"&gt;11&lt;/a&gt;&lt;/span&gt;    };
&lt;span class="line-numbers"&gt;&lt;a href="#n12" name="n12"&gt;12&lt;/a&gt;&lt;/span&gt;    
&lt;span class="line-numbers"&gt;&lt;a href="#n13" name="n13"&gt;13&lt;/a&gt;&lt;/span&gt;    _constructor.prototype.&lt;span style="color:#06B;font-weight:bold"&gt;_registerTrait&lt;/span&gt; = &lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt;(trait) {
&lt;span class="line-numbers"&gt;&lt;a href="#n14" name="n14"&gt;14&lt;/a&gt;&lt;/span&gt;        _this.traits.push(trait);
&lt;span class="line-numbers"&gt;&lt;a href="#n15" name="n15"&gt;15&lt;/a&gt;&lt;/span&gt;    };
&lt;span class="line-numbers"&gt;&lt;a href="#n16" name="n16"&gt;16&lt;/a&gt;&lt;/span&gt;    
&lt;span class="line-numbers"&gt;&lt;a href="#n17" name="n17"&gt;17&lt;/a&gt;&lt;/span&gt;    _constructor.prototype.&lt;span style="color:#06B;font-weight:bold"&gt;_addValue&lt;/span&gt; = &lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; (key, value) {
&lt;span class="line-numbers"&gt;&lt;a href="#n18" name="n18"&gt;18&lt;/a&gt;&lt;/span&gt;        _this[key] = value;
&lt;span class="line-numbers"&gt;&lt;a href="#n19" name="n19"&gt;19&lt;/a&gt;&lt;/span&gt;    };
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n20" name="n20"&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now making a constructor traitable is just a matter of calling the mixin:&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;Dude&lt;/span&gt;() {
&lt;span class="line-numbers"&gt;&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;  makeTraitable(&lt;span style="color:#950"&gt;this&lt;/span&gt;, Dude);
&lt;span class="line-numbers"&gt;&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And we can write our first trait:&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt; &lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;Moveable&lt;/span&gt;(_constructor, initialX, initialY) {
&lt;span class="line-numbers"&gt; &lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;    _constructor.prototype._registerTrait(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;Moveable&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;);
&lt;span class="line-numbers"&gt; &lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;    
&lt;span class="line-numbers"&gt; &lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;    _constructor.prototype._addValue(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;posX&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;, initialX);
&lt;span class="line-numbers"&gt; &lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;    _constructor.prototype._addValue(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;posY&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;, initialY);
&lt;span class="line-numbers"&gt; &lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;    
&lt;span class="line-numbers"&gt; &lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;&lt;/span&gt;    _constructor.prototype.&lt;span style="color:#06B;font-weight:bold"&gt;moveLeft&lt;/span&gt; = &lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; () {
&lt;span class="line-numbers"&gt; &lt;a href="#n8" name="n8"&gt;8&lt;/a&gt;&lt;/span&gt;        &lt;span style="color:#950"&gt;this&lt;/span&gt;.posX -= &lt;span style="color:#00D"&gt;1&lt;/span&gt;;
&lt;span class="line-numbers"&gt; &lt;a href="#n9" name="n9"&gt;9&lt;/a&gt;&lt;/span&gt;    };
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n10" name="n10"&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;}; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s all there is to it!&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt; &lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;/**&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt; * Our new dude will respond to the same predictable&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt; * API as any other Moveable objects.&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt; */&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;Dude&lt;/span&gt;(initialX, initialY) {
&lt;span class="line-numbers"&gt; &lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;    makeTraitable(&lt;span style="color:#950"&gt;this&lt;/span&gt;, Dude);
&lt;span class="line-numbers"&gt; &lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;&lt;/span&gt;    Moveable(Dude, initialX, initialY);
&lt;span class="line-numbers"&gt; &lt;a href="#n8" name="n8"&gt;8&lt;/a&gt;&lt;/span&gt;    Controllable();
&lt;span class="line-numbers"&gt; &lt;a href="#n9" name="n9"&gt;9&lt;/a&gt;&lt;/span&gt;    Killable();
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n10" name="n10"&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;};
&lt;span class="line-numbers"&gt;&lt;a href="#n11" name="n11"&gt;11&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n12" name="n12"&gt;12&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;/**&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n13" name="n13"&gt;13&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt; * Inventing new game objects with different behavior is a&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n14" name="n14"&gt;14&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt; * simple matter of trying mixin combinations.&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n15" name="n15"&gt;15&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt; */&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n16" name="n16"&gt;16&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;Cart&lt;/span&gt;(initialX, initialY) {
&lt;span class="line-numbers"&gt;&lt;a href="#n17" name="n17"&gt;17&lt;/a&gt;&lt;/span&gt;  makeTraitable(&lt;span style="color:#950"&gt;this&lt;/span&gt;, Cart);
&lt;span class="line-numbers"&gt;&lt;a href="#n18" name="n18"&gt;18&lt;/a&gt;&lt;/span&gt;  Moveable(Cart, initialX, initialY);
&lt;span class="line-numbers"&gt;&lt;a href="#n19" name="n19"&gt;19&lt;/a&gt;&lt;/span&gt;  Pushable();
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n20" name="n20"&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt; &lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;ted = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; Dude(&lt;span style="color:#00D"&gt;0&lt;/span&gt;,&lt;span style="color:#00D"&gt;0&lt;/span&gt;);
&lt;span class="line-numbers"&gt; &lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt; 
&lt;span class="line-numbers"&gt; &lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;ted.is(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;Moveable&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;);
&lt;span class="line-numbers"&gt; &lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;//-&amp;gt; true&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt; 
&lt;span class="line-numbers"&gt; &lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;ted.is(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;Pushable&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;);
&lt;span class="line-numbers"&gt; &lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;//-&amp;gt; false&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n8" name="n8"&gt;8&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n9" name="n9"&gt;9&lt;/a&gt;&lt;/span&gt;ted.posX
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n10" name="n10"&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;//-&amp;gt; 0&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n11" name="n11"&gt;11&lt;/a&gt;&lt;/span&gt; 
&lt;span class="line-numbers"&gt;&lt;a href="#n12" name="n12"&gt;12&lt;/a&gt;&lt;/span&gt;ted.moveLeft();
&lt;span class="line-numbers"&gt;&lt;a href="#n13" name="n13"&gt;13&lt;/a&gt;&lt;/span&gt;ted.posX;
&lt;span class="line-numbers"&gt;&lt;a href="#n14" name="n14"&gt;14&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;//-&amp;gt; -1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This lends itself well to manipulating application objects with functional logic:&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;_.zipWith(move, moevables, directions);
&lt;span class="line-numbers"&gt;&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;move&lt;/span&gt;(objectId, direction) {
&lt;span class="line-numbers"&gt;&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;  World[objectId].move(direction);
&lt;span class="line-numbers"&gt;&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It’s also less prone to unexpected behavior.
I can confidently register new objects, mix or remove traits, and not fear the
application will break.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:clusterfoo.com,2014-01-27:/articles/eigengoogle/</id>
    <title type="html">Eigengoogle. How the Google PageRank Algorithm Works</title>
    <published>2014-01-27T05:00:00Z</published>
    <updated>2014-01-27T05:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/articles/eigengoogle/"/>
    <content type="html">&lt;p&gt;&lt;span class="mj"&gt;– IF THIS MESSAGE IS SHOWING, EQUATIONS HAVE NOT RENDERED.
IF YOU ARE ON RSS, VISIT THE ORIGINAL POST. JAVASCRIPT REQUIRED. –&lt;/span&gt;
&lt;script type="math/tex"&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;While we’re on the subject of &lt;a href="http://clusterfoo.com/articles/sorting/"&gt;sorting things online&lt;/a&gt;,
we might as well talk about Google:
the 93-billion dollar company whose main export is taking all
the things ever and putting them in the right order. If there’s one thing Google
knows best, it’s sorting stuff.&lt;/p&gt;

&lt;p&gt;I was curious how it all works, and it turned out really interesting, plus I
got to learn a bit about Markov chains.
It all starts with an algorithm called PageRank&lt;sup&gt;1&lt;/sup&gt;.
&lt;a href="http://en.wikipedia.org/wiki/PageRank"&gt;According to Wikipedia&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pagerank uses a model of a random surfer who gets bored after several
clicks and switches to a random page. It can be understood as a Markov chain in
which the states are pages, and the transitions are the links between pages.
When calculating PageRank, pages with no outbound links are assumed to link
out to all other pages in the collection (the random surfer chooses another
page at random).&lt;/p&gt;

  &lt;p&gt;The PageRank values are the entries of the dominant eigenvector of the
modified adjacency matrix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/eigenvectors.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;In this post I’ll try to break that down and provide some of the background
necessary to understand Google PageRank.&lt;/p&gt;

&lt;h3 id="graphs-as-matrices"&gt;Graphs as Matrices&lt;/h3&gt;

&lt;p&gt;A graph is a collection of nodes joined by edges. If the edges are arrows
that flow in one direction, we call that a &lt;em&gt;directed graph&lt;/em&gt;. A graph whose edges
have each been assigned a “weight” (usually some real number) is a &lt;em&gt;weighted
graph&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/weighted_graph01.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;A graph of &lt;code&gt;n&lt;/code&gt; nodes can be represented in the form of an
&lt;code&gt;n x n&lt;/code&gt; &lt;em&gt;adjacency matrix&lt;/em&gt;,
&lt;span class="mj"&gt;&lt;code&gt;M = [m_ij]&lt;/code&gt;&lt;/span&gt;&lt;script type="math/tex"&gt; M = [m_{ij}]&lt;/script&gt; such that
&lt;span class="mj"&gt;m_ij&lt;/span&gt;&lt;script type="math/tex"&gt;m_{ij}&lt;/script&gt; is equal to the weight of the edge going
from node &lt;span class="mj"&gt;j&lt;/span&gt;&lt;script type="math/tex"&gt;j&lt;/script&gt; to node
&lt;span class="mj"&gt;i&lt;/span&gt;&lt;script type="math/tex"&gt;i&lt;/script&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[0, 1, 0, 0]
[1, 0, 2, 0]
[2, 1, 0, 1]
[0, 0, 4, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="stochastic-matrices"&gt;Stochastic Matrices&lt;/h3&gt;

&lt;p&gt;The
term “stochastic” is used to describe systems whose state can only be described
in probabilistic terms (i.e: the likelihood of some event happening at any given
time).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;:
Consider two competing websites. Every month, the first website loses 30% of its
audience to
the second website, while the second website loses 60% of its audience to the first.&lt;/p&gt;

  &lt;p&gt;If the two websites start out with 50% of the global audience each, how
many users will each website have after a month? After a year?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This scenario can be represented as the following system:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;P = [0.7, 0.6],    x_0 = [0.5, 0.5]
    [0.3, 0.4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/competing_stores_graph.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;This is a &lt;em&gt;Markov chain&lt;/em&gt; with &lt;em&gt;transition matrix&lt;/em&gt; &lt;span class="mj"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/span&gt;&lt;script type="math/tex"&gt;P&lt;/script&gt;
and a &lt;em&gt;state vector&lt;/em&gt; &lt;span class="mj"&gt;&lt;code&gt;x_0&lt;/code&gt;&lt;/span&gt;&lt;script type="math/tex"&gt;\mathbf{ x^{(0)} }&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The transition matrix is called a &lt;em&gt;stochastic matrix&lt;/em&gt;; it represents the
likelihood that some individual in a system will transition from one state
to another. The columns on a stochastic matrix are always non-negative numbers
that add up to 1 (i.e: the probability of &lt;em&gt;at least one&lt;/em&gt;
of the events occurring is always 1 – the likelihood of a user either staying
on the same website, or leaving, is always 100%. He must choose one of the two).&lt;/p&gt;

&lt;p&gt;The state after the first month is&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;-- EQUATION NOT RENDERED IN RSS OR WITH JAVASCRIPT DISABLED --&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    \mathbf{ x^{ (1) } } = P \mathbf{ x^{ (0) } } = [(0.7 + 0.6)\times0.5, (0.3 + 0.4)\times0.5] = [0.65, 0.35]
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So, after the first month, the second website will have only 35% of the
global audience.&lt;/p&gt;

&lt;p&gt;To get the state of the system after two months, we simply
apply the transition matrix again, and so on. That is, the current state of
a Markov chain depends only on its previous state.
Thus, the state vector at month &lt;script type="math/tex"&gt;k&lt;/script&gt; can be defined recursively:&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;-- EQUATION NOT RENDERED IN RSS OR WITH JAVASCRIPT DISABLED --&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    \mathbf{ x^{(k)} } = P\mathbf{ x^{ (k - 1) } }
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;From which, through substitution, we can derive the following equation:&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;-- EQUATION NOT RENDERED IN RSS OR WITH JAVASCRIPT DISABLED --&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    \mathbf{ x^{(k)} } = P^k \mathbf{ x^{(0)} }
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Using this information, we can figure out the state of the system
after a year, and then again after two years
(using the &lt;a href="http://www.sagemath.org/"&gt;Sage&lt;/a&gt; mathematical library for python):&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;P = Matrix([[&lt;span style="color:#60E"&gt;0.70&lt;/span&gt;, &lt;span style="color:#60E"&gt;0.60&lt;/span&gt;],
&lt;span class="line-numbers"&gt;&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;            [&lt;span style="color:#60E"&gt;0.30&lt;/span&gt;, &lt;span style="color:#60E"&gt;0.40&lt;/span&gt;]])
&lt;span class="line-numbers"&gt;&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;x = vector([&lt;span style="color:#60E"&gt;0.5&lt;/span&gt;,&lt;span style="color:#60E"&gt;0.5&lt;/span&gt;])
&lt;span class="line-numbers"&gt;&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;P^&lt;span style="color:#00D"&gt;12&lt;/span&gt;*x
&lt;span class="line-numbers"&gt;&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;# -&amp;gt; (0.666666666666500, 0.333333333333500)&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;P^&lt;span style="color:#00D"&gt;24&lt;/span&gt;*x
&lt;span class="line-numbers"&gt;&lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;# -&amp;gt; (0.666666666666666, 0.333333333333333)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So it seems like the state vector is “settling” around those values.
It would appear that, as &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;n \to \infty&lt;/script&gt;,
&lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;P^n\mathbf{ x^{ (0) } }&lt;/script&gt; is converging to some
&lt;script type="math/tex"&gt;\mathbf{ x }&lt;/script&gt;
such that &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;P\mathbf{ x } = \mathbf{ x }&lt;/script&gt;.
As we’ll see below, this is indeed the case.&lt;/p&gt;

&lt;p&gt;We’ll call this &lt;script type="math/tex"&gt;\mathbf{ x }&lt;/script&gt; the &lt;em&gt;steady state vector&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id="eigenvectors"&gt;Eigenvectors!&lt;/h3&gt;

&lt;p&gt;Recall from linear algebra that an eigenvector of a matrix &lt;script type="math/tex"&gt;A&lt;/script&gt;
is a vector &lt;script type="math/tex"&gt;\mathbf{x}&lt;/script&gt; such that:&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;-- EQUATION NOT RENDERED IN RSS OR WITH JAVASCRIPT DISABLED --&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    A\mathbf{ x } = \lambda \mathbf{ x }
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;for some scalar &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;\lambda&lt;/script&gt; (the &lt;em&gt;eigenvalue&lt;/em&gt;). A &lt;em&gt;leading eigenvalue&lt;/em&gt; is an
eigenvalue &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;\lambda_{ 1 }&lt;/script&gt; such that its absolute value is greater than
any other eigenvalue for the given matrix.&lt;/p&gt;

&lt;p&gt;One method of finding the leading eigenvector of a matrix is through
a &lt;a href="http://en.wikipedia.org/wiki/Power_iteration"&gt;power iteration&lt;/a&gt; sequence, defined
recursively like so:&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;-- EQUATION NOT RENDERED IN RSS OR WITH JAVASCRIPT DISABLED --&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    \mathbf{ x_k } = \cfrac{ A\mathbf{ x_{ k-1 } } }{ \| A\mathbf{ x_{ k-1 } } \| }
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Again, by noting that we can substitute
&lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt; A\mathbf{ x_{ k-1 } } =  A(A\mathbf{ x_{ k-2 } }) = A^2\mathbf{ x_{ k-2 } } &lt;/script&gt;,
and so on, it follows that:&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;-- EQUATION NOT RENDERED IN RSS OR WITH JAVASCRIPT DISABLED --&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    \mathbf{ x_k } =  \cfrac{ A^k \mathbf{ x_0 } }{ \| A^k \mathbf{ x_0 } \| }
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This sequence converges to the leading eigenvector of &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;A&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Thus we see that the steady state vector is just an eigenvector with the
special case &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;\lambda = 1&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id="stochastic-matrices-that-dont-play-nice"&gt;Stochastic Matrices that Don’t Play Nice&lt;/h3&gt;

&lt;p&gt;Before we can finally get to Google PageRank, we need to make a few more observations.&lt;/p&gt;

&lt;p&gt;First, it should be noted that power iteration has its limitations:
not all stochastic matrices converge. Take as an example:&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt; &lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;P = Matrix([ [&lt;span style="color:#00D"&gt;0&lt;/span&gt;, &lt;span style="color:#00D"&gt;1&lt;/span&gt;, &lt;span style="color:#00D"&gt;0&lt;/span&gt;],
&lt;span class="line-numbers"&gt; &lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;             [&lt;span style="color:#00D"&gt;1&lt;/span&gt;, &lt;span style="color:#00D"&gt;0&lt;/span&gt;, &lt;span style="color:#00D"&gt;0&lt;/span&gt;],
&lt;span class="line-numbers"&gt; &lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;             [&lt;span style="color:#00D"&gt;0&lt;/span&gt;, &lt;span style="color:#00D"&gt;0&lt;/span&gt;, &lt;span style="color:#00D"&gt;1&lt;/span&gt;]])
&lt;span class="line-numbers"&gt; &lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;x = vector([&lt;span style="color:#60E"&gt;0.2&lt;/span&gt;, &lt;span style="color:#60E"&gt;0.3&lt;/span&gt;, &lt;span style="color:#60E"&gt;0.5&lt;/span&gt;])
&lt;span class="line-numbers"&gt; &lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;&lt;/span&gt;P * x
&lt;span class="line-numbers"&gt; &lt;a href="#n8" name="n8"&gt;8&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;# -&amp;gt; (0.3, 0.2, 0.5)&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n9" name="n9"&gt;9&lt;/a&gt;&lt;/span&gt;P^&lt;span style="color:#00D"&gt;2&lt;/span&gt; * x
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n10" name="n10"&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;# -&amp;gt; (0.2, 0.3, 0.5)&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n11" name="n11"&gt;11&lt;/a&gt;&lt;/span&gt;P^&lt;span style="color:#00D"&gt;3&lt;/span&gt; * x
&lt;span class="line-numbers"&gt;&lt;a href="#n12" name="n12"&gt;12&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;# -&amp;gt; (0.3, 0.2, 0.5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The state vectors of this matrix will oscillate in such a way forever. This
matrix can be thought of
as the transformation matrix for reflection about a line in the x,y axis… this
system will never converge (indeed, it has no leading eigenvalue:
&lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt; |\lambda_1| = |\lambda_2| = |\lambda_3| = 1 &lt;/script&gt;).&lt;/p&gt;

&lt;p&gt;Another way of looking at &lt;script type="math/tex"&gt;P&lt;/script&gt; is by drawing its graph:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/oscillating_chain.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Using our example of competing websites, this matrix describes a system such that,
every month, &lt;em&gt;all&lt;/em&gt; of the first website’s users leave and join the seconds website,
only to abandon the second website again a month later and return to the first,
and so on, forever.&lt;/p&gt;

&lt;p&gt;It would be absurd to hope for this system to converge to a steady state.&lt;/p&gt;

&lt;p&gt;States 1 and 2 are examples of &lt;em&gt;recurrent states&lt;/em&gt;. These are states that,
once reached, there is a probability of 1 (absolute certainty)
that the Markov chain will return to them infinitely many times.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;transient state&lt;/em&gt; is such that the probability is &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt; &gt; 0&lt;/script&gt; that they will
never be reached again. (If the probability &lt;em&gt;is&lt;/em&gt; 0, we call such a state
&lt;em&gt;ephemeral&lt;/em&gt; – in terms of Google PageRank, this would be a page that no
other page links to):&lt;/p&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/diffrent_states.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;There are two conditions a transition matrix must meet if we want to ensure that
it converges to a steady state:&lt;/p&gt;

&lt;p&gt;It must be &lt;em&gt;irreducible&lt;/em&gt;: an irreducible transition matrix is a
matrix whose graph has no closed subsets. (A closed subset is such that no state
within it can reach a state outside of it. 1, 2 and 3 above are closed from
4 and 5.)&lt;/p&gt;

&lt;p&gt;It must be &lt;em&gt;primitive&lt;/em&gt;:
A primitive matrix &lt;script type="math/tex"&gt;P&lt;/script&gt; is such that, for some positive
integer &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;n&lt;/script&gt;, &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;P^n&lt;/script&gt; is such
that &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;p_{ ij } &gt; 0&lt;/script&gt; for all &lt;span class="mj"&gt;EQ&lt;/span&gt;&lt;script type="math/tex"&gt;p_{ ij } \in P&lt;/script&gt;
(that is: all of its entries are positive numbers).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;More generally, it must be &lt;em&gt;positive recurrent&lt;/em&gt; and &lt;em&gt;aperiodic&lt;/em&gt;.&lt;/p&gt;

  &lt;p&gt;Positive recurrence means that it takes, on average,
a finite number of steps to return to any given state. Periodicity means the
number of steps it takes to return to a particular state is always divisible
by some natural number &lt;script type="math/tex"&gt;n&lt;/script&gt; (its period).&lt;/p&gt;

  &lt;p&gt;Since we’re dealing
with finite Markov chains, irreducibility implies positive recurrence, and
primitiveness ensures aperiodicity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/periodic.png" alt=""&gt;&lt;/p&gt;

&lt;h3 id="google-pagerank"&gt;Google PageRank&lt;/h3&gt;

&lt;p&gt;We are now finally ready to understand how the PageRank algorithm works. Recall
from Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The formula uses a model of a random surfer who gets bored after several clicks
and switches to a random page. The PageRank value of a page reflects the chance
that the random surfer will land on that page by clicking on a link. It can be
understood as a Markov chain in which the states are pages, and the transitions,
which are all equally probable, are the links between pages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, for example, if we wanted to represent our graph above, we would start
with the following adjacency matrix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[0, 0, 0.5, 0,   0],
[0, 0, 0.5, 0.5, 0],
[1, 1, 0,   0,   0],
[0, 0, 0,   0,   0],
[0, 0, 0,   0.5, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the algorithm to work, we must transform this original matrix in such a way
that we end up with an irreducible, primitive matrix. First,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a page has no links to other pages, it becomes a sink and therefore
terminates the random surfing process. If the random surfer arrives at a sink
page, it picks another URL at random and continues surfing again.&lt;/p&gt;

  &lt;p&gt;When calculating PageRank, pages with no outbound links are assumed to link
out to all other pages in the collection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;        [0, 0, 0.5, 0,   0.2],
        [0, 0, 0.5, 0.5, 0.2],
S =     [1, 1, 0,   0,   0.2],
        [0, 0, 0,   0,   0.2],
        [0, 0, 0,   0.5, 0.2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are now ready to produce &lt;script type="math/tex"&gt;G&lt;/script&gt;, the Google Matrix, which is both irreducible
and primitive. Its steady state vector gives us the final PageRank score for
each page.&lt;/p&gt;

&lt;h3 id="the-google-matrix"&gt;The Google Matrix&lt;/h3&gt;

&lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/Google_matrix"&gt;Google Matrix&lt;/a&gt;
for an &lt;script type="math/tex"&gt;n \times n&lt;/script&gt; matrix &lt;script type="math/tex"&gt;S&lt;/script&gt; is derived from the equation&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;-- EQUATION NOT RENDERED IN RSS OR WITH JAVASCRIPT DISABLED --&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    G = \alpha S + (1 - \alpha) \frac{1}{n} E
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;script type="math/tex"&gt;E = \mathbf{ e }\mathbf{ e }^T&lt;/script&gt; is an &lt;script type="math/tex"&gt;n \times n&lt;/script&gt; matrix whose entries are all 1, and
&lt;script type="math/tex"&gt;0 \le \alpha \le 1&lt;/script&gt; is referred to as the &lt;em&gt;damping factor&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;script type="math/tex"&gt;\alpha = 1&lt;/script&gt;, then &lt;script type="math/tex"&gt;G = S&lt;/script&gt;. Meanwhile, if &lt;script type="math/tex"&gt;\alpha = 0&lt;/script&gt; all of the entries
in &lt;script type="math/tex"&gt;G&lt;/script&gt; are the same (hence, the original structure of the network is
“dampened” by &lt;script type="math/tex"&gt;\alpha&lt;/script&gt;, until we lose it altogether).&lt;/p&gt;

&lt;p&gt;So the matrix &lt;script type="math/tex"&gt;(1 - \alpha) \frac{1}{n} E&lt;/script&gt; is a matrix that
represents a “flat” network in which all pages link to all pages, and the user is
equally likely to click any given link (with likelihood &lt;script type="math/tex"&gt;\frac{ 1-\alpha }{ n }&lt;/script&gt;),
while &lt;script type="math/tex"&gt;S&lt;/script&gt; is dampened by a factor of &lt;script type="math/tex"&gt;\alpha&lt;/script&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Google uses a damping factor of 0.85. For more on this, I
found &lt;a href="https://s3.amazonaws.com/clusterfoo.img/2014/eigenpaper.pdf"&gt;this paper&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; the second eigenvalue
of a Google matrix is &lt;script type="math/tex"&gt;|\lambda_2| = \alpha \le |\lambda_1| = 1&lt;/script&gt; , and the rate of convergence
of the power iteration is given by &lt;script type="math/tex"&gt;\frac{ |\lambda_2| }{ |\lambda_1| } = \alpha&lt;/script&gt;.
So higher values of &lt;script type="math/tex"&gt;\alpha&lt;/script&gt; imply better accuracy but worse performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With some moving stuff around, we can see that&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;-- EQUATION NOT RENDERED IN RSS OR WITH JAVASCRIPT DISABLED --&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    \left(\alpha s_{ 1j } + \frac{1-\alpha}{ n }\right) + \left(\alpha s_{ 2j }
    + \frac{1-\alpha}{ n }\right) + ... + \left(\alpha s_{ nj } + \frac{1-\alpha}{ n }\right) = 1
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;For all &lt;script type="math/tex"&gt;j&lt;/script&gt; up to &lt;script type="math/tex"&gt;n&lt;/script&gt;, which means that &lt;script type="math/tex"&gt;G&lt;/script&gt; is indeed stochastic,
irreducible, and primitive. Cool.&lt;/p&gt;

&lt;p&gt;In conclusion,&lt;/p&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/eigensnotsicles.png" alt="Imgur"&gt;&lt;/p&gt;

&lt;hr&gt;
&lt;p&gt;&lt;small&gt;
1. Actually, it all started with the &lt;a href="http://en.wikipedia.org/wiki/HITS_algorithm"&gt;HITS algorithm&lt;/a&gt;,
which PageRank is based off of.
More details &lt;a href="http://www.math.cornell.edu/~mec/Winter2009/RalucaRemus/Lecture4/lecture4.html"&gt;here&lt;/a&gt;.
&lt;/small&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:clusterfoo.com,2014-01-23:/articles/sorting/</id>
    <title type="html">Sorting Posts by User Engagement Level (With Elasticsearch Implementation)</title>
    <published>2014-01-23T05:00:00Z</published>
    <updated>2014-01-23T05:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/articles/sorting/"/>
    <content type="html">&lt;p&gt;At Functional Imperative we’re building the new &lt;em&gt;CanLII Connects&lt;/em&gt; website
(a social portal for Canada’s largest database of legal cases), and
this week I was given the task of figuring out a sensible way of sorting posts.&lt;/p&gt;

&lt;p&gt;Figuring out how to sort user-generated content is
a common problem that many social websites face.&lt;/p&gt;

&lt;p&gt;Here’s Reddit’s scoring equation for ‘Best’ &lt;a href="http://www.evanmiller.org/how-not-to-sort-by-average-rating.html"&gt;(source and explanation)&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/reddit_best.png" alt="Reddit's 'best' scoring equation"&gt;&lt;/p&gt;

&lt;p&gt;Not all scoring equations are that hairy,
&lt;a href="http://moz.com/blog/reddit-stumbleupon-delicious-and-hacker-news-algorithms-exposed"&gt;here are a few more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly enough, Reddit’s ‘Hot’ scoring function (explained in link above):&lt;/p&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/reddit_hot_algo.png" alt="Reddit's scoring equation"&gt;&lt;/p&gt;

&lt;p&gt;is &lt;a href="http://technotes.iangreenleaf.com/posts/2013-12-09-reddits-empire-is-built-on-a-flawed-algorithm.html"&gt;quite flawed&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Sidenote&lt;/strong&gt;: One observation not mentioned in that first article
is that, while all other equations use some form of
&lt;code&gt;time_now - time_posted&lt;/code&gt; to calculate how old a post is, the clever guys at
Reddit use &lt;code&gt;time_posted - some_old_date&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;The advantage of this is that the post’s score need only be calculated once,
whereas the value of scores calculated with &lt;code&gt;time_now&lt;/code&gt; will change on every
request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyway, while all those scoring functions work pretty well, they didn’t quite
fit the requirements for &lt;em&gt;CanLII Connects&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this post, I’ll walk through the decision process of creating a scoring
function. Hopefully this will be useful if you encounter a similar feature to
implement.&lt;/p&gt;

&lt;h3 id="requirements"&gt;Requirements:&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;CanLII Connects&lt;/em&gt; links to a database of legal cases, and users can post opinions
on those cases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A user can post.&lt;/li&gt;
  &lt;li&gt;A user can upvote a post.&lt;/li&gt;
  &lt;li&gt;A user can comment on a post.&lt;/li&gt;
  &lt;li&gt;A user can comment on a comment on a post.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what’s a sensible way of sorting posts?&lt;/p&gt;

&lt;p&gt;Right away, we’re dealing with a different problem than Reddit or HN: while
it makes sense to slowly degrade the score of a post on those sites over time,
the same does not make sense for CanLII. Old cases might be cited at any time,
no matter how old they are, so what matters is not how old a discussion is, but
rather how actively engaged users are within a given discussion.&lt;/p&gt;

&lt;h3 id="initial-score"&gt;Initial Score&lt;/h3&gt;

&lt;p&gt;Ok, so first we have to give each post an initial score. I like Reddit’s approach
of taking the base-10 log of its upvotes. This makes sense because, the more
popular a post already is, the more likely people are to see it, and therefore
upvote it, which gives it an unfair advantage.&lt;/p&gt;

&lt;p&gt;In our case, we’re not only trying to
measure how much people “like” a post, but rather how engaged they are with it.
It makes sense that, while an upvote is a fine indicator of “engagedness”, a
user actually bothering to comment on a post is even more of an indicator. I’ll
count that as equivalent to two upvotes, and a user commenting on a comment will
count as three upvotes (the 2 is so we don’t take the log of 1 or 0):&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;log_10(2 + u + 2c + 3cc)&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    log_{10}(2 + u + 2c + 3cc)
&lt;/script&gt;&lt;/p&gt;

&lt;h3 id="frequency"&gt;Frequency&lt;/h3&gt;

&lt;p&gt;Next, we need the post’s position to degrade as it becomes less active. It makes
sense to divide the intial score by some factor of time:&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;log_10(score)/t_ave&lt;/code&gt;&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    \cfrac{ log_{10} (2+u+2c+3cc) }{ \bar{t} }
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Now we need a reasonable value for &lt;span class="mj"&gt;&lt;code&gt;t_ave&lt;/code&gt;&lt;/span&gt;&lt;script type="math/tex"&gt; \bar{ t } &lt;/script&gt;.
A good start is the average time, in seconds, between the three most
recent user interactions with  a post.&lt;/p&gt;

&lt;p&gt;We define a user interaction to be: a user creates a post, a user comments on
a post, or a user upvotes a post.&lt;/p&gt;

&lt;p&gt;Also, we want the most recent interactions to weigh more than older interactions.
So let’s say each &lt;code&gt;t&lt;/code&gt; weighs twice as much
as the previous:&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;
&lt;code&gt;t_ave = sum(0.5^i-1 * (t_i - t_i-1)) / sum(o.5^i-1) for i = 1..3
-- ENABLE JAVASCRIPT TO VIEW RENDERED EQUATION&lt;/code&gt;
&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    \bar{ t } = \cfrac{\sum_{i=1}^3 \left(\frac{1}{2}\right)^{i-1} * (t_i - t_{i-1}) }{ \sum_{i=1}^3  \left(\frac{1}{2}\right)^{i-1}}
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Where&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;t_0&lt;/code&gt;&lt;/span&gt;&lt;script type="math/tex"&gt; t_0 &lt;/script&gt; = &lt;a href="http://en.wikipedia.org/wiki/Unix_time"&gt;UNIX timestamp&lt;/a&gt;,
at now, in seconds.&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;&lt;code&gt;t_n&lt;/code&gt;&lt;/span&gt;&lt;script type="math/tex"&gt; t_n &lt;/script&gt; = &lt;a href="http://en.wikipedia.org/wiki/Unix_time"&gt;UNIX timestamp&lt;/a&gt;
of n&lt;sup&gt;th&lt;/sup&gt; interaction.&lt;/p&gt;

&lt;h3 id="one-final-detail"&gt;One Final Detail&lt;/h3&gt;

&lt;p&gt;There is one last property we want this function to have, which is the following:
if interactions are very frequent right now (within a timeframe of, say, 10 days),
then clearly the post is “hot”, and its score should be boosted. But as
time passes, it really doesn’t matter as much how much distance there
is between interactions. If a post has already gone a full year without anyone
commenting on it, does it
really make that much difference if it goes another month without a comment?&lt;/p&gt;

&lt;p&gt;To accomplish the first property, all we do is divide &lt;span class="mj"&gt;&lt;code&gt;t_ave&lt;/code&gt;&lt;/span&gt;&lt;script type="math/tex"&gt; \bar{ t }&lt;/script&gt;
by the number of seconds in 10 days: &lt;code&gt;60*60*24*10&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To accomplish the second property, what we are looking for is some sort of
always-increasing, concave function (positive derivative, negative second derivative).
The first thing that comes to mind is the square-root function, which is good enough.&lt;/p&gt;

&lt;h3 id="result"&gt;Result&lt;/h3&gt;

&lt;p&gt;And thus we have our final scoring function:&lt;/p&gt;

&lt;p&gt;&lt;span class="mj"&gt;
&lt;code&gt;log(u + 2c + 3cc)/(sqrt(t_ave/60*60*24*10)); t_ave defined above -- ENABLE JAVASCRIPT FOR PRETTY EQUATIONS&lt;/code&gt;
&lt;/span&gt;
&lt;script type="math/tex; mode=display"&gt;
    \cfrac{ log_{10} (2 + u + 2c + 3cc) }{ \sqrt{ \bar{t}/60*60*24*10 }}
&lt;/script&gt;&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt; \bar{ t } = \cfrac{\sum_{i=1}^3 \left(\frac{1}{2}\right)^{i-1} * (t_i - t_{i-1}) }{ \sum_{i=1}^3  \left(\frac{1}{2}\right)^{i-1}} &lt;/script&gt;

&lt;p&gt;If we plot this equation for &lt;code&gt;x = number of points&lt;/code&gt; and &lt;code&gt;y = time&lt;/code&gt;, we can see the
shape of this function and check for different values if they make sense:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://clusterfoo.com/assets/images/2014/scoring_function_shape_2.jpg" alt="Scoring function 3D plot"&gt;&lt;/p&gt;

&lt;p&gt;As expected, there is a steep 10-day “boost” period, followed by an increasingly
slower decline in the value as more and more time passes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The function is also heavily biased toward very new posts, which will always come
out on top, giving them a chance. This might be a bad idea if posting becomes
frequent, but user interaction is low (many summaries a day, few votes or comments),
and might have to be changed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are many ways to tweak this equation (changing the boost period, for example)
to make it more or less biased towards either time or user interaction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="bonus-round-implementing-in-elasticsearch"&gt;Bonus Round: Implementing in ElasticSearch&lt;/h3&gt;

&lt;p&gt;Implementing a custom scoring function in Elasticsearch, though easy once it’s
all set up, was rather frustrating because of the poor documentation.&lt;/p&gt;

&lt;p&gt;For our implementation, we’re using the &lt;code&gt;tire&lt;/code&gt; gem (a wrapper around the
Elasticsearch API). This is where we call the custom scoring script:&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;query &lt;span style="color:#080;font-weight:bold"&gt;do&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;  &lt;span style="color:#777"&gt;#custom_score script: "parseInt(doc['upvote_count'].value)", lang: "javascript" do&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;  custom_score &lt;span style="color:#606"&gt;script&lt;/span&gt;: script, &lt;span style="color:#606"&gt;lang&lt;/span&gt;: &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;span style="color:#D20"&gt;javascript&lt;/span&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;do&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;    string query.join(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt; OR &lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="line-numbers"&gt;&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;  &lt;span style="color:#080;font-weight:bold"&gt;end&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Where &lt;code&gt;script&lt;/code&gt; is simply a variable holding the contents of a javascript file
as a string. Note the option &lt;code&gt;lang: 'javascript'&lt;/code&gt;. This lets us use javascript
as our language of choice, as opposed to &lt;a href="http://mvel.codehaus.org/"&gt;mvel&lt;/a&gt;, the
most poorly documented scripting language on the face of the earth. To enable
this option, we’ll also require the &lt;a href="https://github.com/elasticsearch/elasticsearch-lang-javascript"&gt;elasticsearch-lang-javascript&lt;/a&gt;
plugin.&lt;/p&gt;

&lt;p&gt;Here is our script:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Sidenote:&lt;/strong&gt; Notice the logger function. This enables us to implement a sort of “console.log”
which we can read using the following shell command &lt;code&gt;tail -f /var/log/elasticsearch/elasticsearch.log&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt; &lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;// Logger function:&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; logger = org.elasticsearch.common.logging.Loggers.getLogger(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;rails_logger&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;);
&lt;span class="line-numbers"&gt; &lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;// Example usage:&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;logger.info(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;========= NEW CALC ===========&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;);
&lt;span class="line-numbers"&gt; &lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; points_log = parseFloat(doc.points_log.value);
&lt;span class="line-numbers"&gt; &lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; now = Math.round(&lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; Date().getTime() / &lt;span style="color:#00D"&gt;1000&lt;/span&gt;);
&lt;span class="line-numbers"&gt; &lt;a href="#n8" name="n8"&gt;8&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt; &lt;a href="#n9" name="n9"&gt;9&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;/**&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n10" name="n10"&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;* NOTE: doc.ts.values is not actually an array,&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n11" name="n11"&gt;11&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;* here I create an array out of it:&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n12" name="n12"&gt;12&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;**/&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n13" name="n13"&gt;13&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; ts = [];
&lt;span class="line-numbers"&gt;&lt;a href="#n14" name="n14"&gt;14&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; (&lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; i = &lt;span style="color:#00D"&gt;0&lt;/span&gt;; i &amp;lt; doc.ts.values.length; i++) ts[i] = doc.ts.values[i];
&lt;span class="line-numbers"&gt;&lt;a href="#n15" name="n15"&gt;15&lt;/a&gt;&lt;/span&gt;ts.push(now);
&lt;span class="line-numbers"&gt;&lt;a href="#n16" name="n16"&gt;16&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;// Newest first&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n17" name="n17"&gt;17&lt;/a&gt;&lt;/span&gt;ts.reverse();
&lt;span class="line-numbers"&gt;&lt;a href="#n18" name="n18"&gt;18&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n19" name="n19"&gt;19&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;/**&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n20" name="n20"&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;* Boost period.&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n21" name="n21"&gt;21&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;**/&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n22" name="n22"&gt;22&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; ten_days = &lt;span style="color:#00D"&gt;60&lt;/span&gt;*&lt;span style="color:#00D"&gt;60&lt;/span&gt;*&lt;span style="color:#00D"&gt;24&lt;/span&gt;*&lt;span style="color:#00D"&gt;10&lt;/span&gt;;
&lt;span class="line-numbers"&gt;&lt;a href="#n23" name="n23"&gt;23&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n24" name="n24"&gt;24&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;/**&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n25" name="n25"&gt;25&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;* The scoring function&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n26" name="n26"&gt;26&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;**/&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n27" name="n27"&gt;27&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;score&lt;/span&gt;() {
&lt;span class="line-numbers"&gt;&lt;a href="#n28" name="n28"&gt;28&lt;/a&gt;&lt;/span&gt;  &lt;span style="color:#777"&gt;/**&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n29" name="n29"&gt;29&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;  * Weighed average numerator&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n30" name="n30"&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;  **/&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n31" name="n31"&gt;31&lt;/a&gt;&lt;/span&gt;  &lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; times_num = (&lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt;() {
&lt;span class="line-numbers"&gt;&lt;a href="#n32" name="n32"&gt;32&lt;/a&gt;&lt;/span&gt;    &lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; val = &lt;span style="color:#00D"&gt;0&lt;/span&gt;;
&lt;span class="line-numbers"&gt;&lt;a href="#n33" name="n33"&gt;33&lt;/a&gt;&lt;/span&gt;    &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; (&lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; i = &lt;span style="color:#00D"&gt;1&lt;/span&gt;; i &amp;lt; ts.length; i++) {
&lt;span class="line-numbers"&gt;&lt;a href="#n34" name="n34"&gt;34&lt;/a&gt;&lt;/span&gt;      &lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; exp = i - &lt;span style="color:#00D"&gt;1&lt;/span&gt;;
&lt;span class="line-numbers"&gt;&lt;a href="#n35" name="n35"&gt;35&lt;/a&gt;&lt;/span&gt;      val += Math.pow(&lt;span style="color:#60E"&gt;0.5&lt;/span&gt;, exp) *
&lt;span class="line-numbers"&gt;&lt;a href="#n36" name="n36"&gt;36&lt;/a&gt;&lt;/span&gt;             (parseFloat(ts[i]) -
&lt;span class="line-numbers"&gt;&lt;a href="#n37" name="n37"&gt;37&lt;/a&gt;&lt;/span&gt;             parseFloat(ts[i - &lt;span style="color:#00D"&gt;1&lt;/span&gt;]));
&lt;span class="line-numbers"&gt;&lt;a href="#n38" name="n38"&gt;38&lt;/a&gt;&lt;/span&gt;    }
&lt;span class="line-numbers"&gt;&lt;a href="#n39" name="n39"&gt;39&lt;/a&gt;&lt;/span&gt;    &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; val;
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n40" name="n40"&gt;40&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;  })();
&lt;span class="line-numbers"&gt;&lt;a href="#n41" name="n41"&gt;41&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n42" name="n42"&gt;42&lt;/a&gt;&lt;/span&gt;  &lt;span style="color:#777"&gt;/**&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n43" name="n43"&gt;43&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;  * Weighed average denominator&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n44" name="n44"&gt;44&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#777"&gt;  **/&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n45" name="n45"&gt;45&lt;/a&gt;&lt;/span&gt;  &lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; times_denom = (&lt;span style="color:#080;font-weight:bold"&gt;function&lt;/span&gt;() {
&lt;span class="line-numbers"&gt;&lt;a href="#n46" name="n46"&gt;46&lt;/a&gt;&lt;/span&gt;    &lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; val = &lt;span style="color:#00D"&gt;0&lt;/span&gt;;
&lt;span class="line-numbers"&gt;&lt;a href="#n47" name="n47"&gt;47&lt;/a&gt;&lt;/span&gt;    &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; (&lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; i = &lt;span style="color:#00D"&gt;1&lt;/span&gt;; i &amp;lt; ts.length; i++) {
&lt;span class="line-numbers"&gt;&lt;a href="#n48" name="n48"&gt;48&lt;/a&gt;&lt;/span&gt;      &lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; exp = i - &lt;span style="color:#00D"&gt;1&lt;/span&gt;;
&lt;span class="line-numbers"&gt;&lt;a href="#n49" name="n49"&gt;49&lt;/a&gt;&lt;/span&gt;      val += Math.pow(&lt;span style="color:#60E"&gt;0.5&lt;/span&gt;, exp);
&lt;span class="line-numbers"&gt;&lt;strong&gt;&lt;a href="#n50" name="n50"&gt;50&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    }
&lt;span class="line-numbers"&gt;&lt;a href="#n51" name="n51"&gt;51&lt;/a&gt;&lt;/span&gt;    &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; val;
&lt;span class="line-numbers"&gt;&lt;a href="#n52" name="n52"&gt;52&lt;/a&gt;&lt;/span&gt;  })();
&lt;span class="line-numbers"&gt;&lt;a href="#n53" name="n53"&gt;53&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n54" name="n54"&gt;54&lt;/a&gt;&lt;/span&gt;  &lt;span style="color:#080;font-weight:bold"&gt;var&lt;/span&gt; t_ave = (times_num/times_denom);
&lt;span class="line-numbers"&gt;&lt;a href="#n55" name="n55"&gt;55&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n56" name="n56"&gt;56&lt;/a&gt;&lt;/span&gt;  &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; points_log/Math.sqrt(t_ave/ten_days);
&lt;span class="line-numbers"&gt;&lt;a href="#n57" name="n57"&gt;57&lt;/a&gt;&lt;/span&gt;};
&lt;span class="line-numbers"&gt;&lt;a href="#n58" name="n58"&gt;58&lt;/a&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n59" name="n59"&gt;59&lt;/a&gt;&lt;/span&gt;score();
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <id>tag:clusterfoo.com,2013-10-05:/articles/amdahls_law/</id>
    <title type="html">Amdahl's Law</title>
    <published>2013-10-05T04:00:00Z</published>
    <updated>2013-10-05T04:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/articles/amdahls_law/"/>
    <content type="html">&lt;!-- _. --&gt;

&lt;p&gt;&lt;em&gt;The mathematical equations in this post require Javascript and will not
render if you are on RSS or email.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As multicore computing becomes the norm (even my phone is
dual core!), it’s important to understand the benefits and also the limitations
of concurrency. Amdahl’s Law addresses the latter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s imagine a simple program. It prints “Hello World” &lt;script type="math/tex"&gt;100&lt;/script&gt; times, then
quits.&lt;/p&gt;

&lt;p&gt;Our first version of the program is written as a single sequential task: it
prints one “Hello World”, then another, then another, &lt;script type="math/tex"&gt;100&lt;/script&gt; times, then quits.
This program takes some unit of time, &lt;script type="math/tex"&gt;t&lt;/script&gt; to execute.&lt;/p&gt;

&lt;p&gt;Now say we have a dual-core machine at hand. (My phone, perhaps).&lt;/p&gt;

&lt;p&gt;Cool, now we can spawn &lt;em&gt;two&lt;/em&gt; tasks that print
“Hello World” &lt;script type="math/tex"&gt;50&lt;/script&gt; times each. And, because our magical imaginary computer
experiences no overhead, it takes us exactly &lt;script type="math/tex"&gt;\frac{ t }{ 2 }&lt;/script&gt;
units of time to run our second program.&lt;/p&gt;

&lt;p&gt;So we keep adding more and more processors,
until we have &lt;script type="math/tex"&gt;100&lt;/script&gt; concurrent threads printing one
“Hello World” each, and our program runs &lt;script type="math/tex"&gt;100&lt;/script&gt; times faster.&lt;/p&gt;

&lt;p&gt;At this point we stop: “Ah, the trend is clear: more processors equals more
speed! No point in continuing this experiment.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A naive (wrong) first guess:&lt;/strong&gt; Given &lt;script type="math/tex"&gt;n&lt;/script&gt; processors executing a program,
the maximum boost in speed is &lt;script type="math/tex"&gt; n &lt;/script&gt;. (That is, we can get our program to
run &lt;script type="math/tex"&gt; n &lt;/script&gt; times faster).&lt;/p&gt;

&lt;p&gt;Cool! This means that, given enough processors, we could make &lt;em&gt;any&lt;/em&gt; program run
almost instantly. Right?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/aLPBSUa.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href="http://forums.pureoverclock.com/amd/21809-rumor-mill-amd-iv-x12-170-12-cores-24mb-cache-6ghz-2.html#post169754"&gt;Pic original source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Of course this is not the case! Enough daydreaming. Let’s figure out a more
realistic estimate.&lt;/p&gt;

&lt;p&gt;Let &lt;script type="math/tex"&gt;P&lt;/script&gt; be the proportion of our program
that can run in parallel. Then it follows that &lt;script type="math/tex"&gt;1 - P&lt;/script&gt; is the proportion
that cannot be broken up into independent tasks.&lt;/p&gt;

&lt;p&gt;For example, since our program can be broken up into &lt;script type="math/tex"&gt;100&lt;/script&gt; independent tasks,
then &lt;script type="math/tex"&gt;1 - P = \frac{ 1 }{ 100 }&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;It follows that the maximum boost in speed (denoted &lt;script type="math/tex"&gt;S(n)&lt;/script&gt;) that
we can expect out of assigning concurrent tasks to &lt;script type="math/tex"&gt;n&lt;/script&gt; parallel processors
can be represented by the following equation:&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;S(n) = \frac{ 1 }{ (1 - P) + \frac{ P }{ n } }&lt;/script&gt;

&lt;p&gt;This is, in fact, Amdahl’s equation.&lt;/p&gt;

&lt;p&gt;Uh-oh… do you see it? As we add more and more processors to our computer, and
&lt;script type="math/tex"&gt;n \to \infty&lt;/script&gt;, we are left with &lt;script type="math/tex"&gt; S =  \frac{ 1 }{ 1 - p } &lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;What we have here is a clear case of &lt;em&gt;diminishing returns.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How bad is it?
Let’s add &lt;em&gt;one million cores&lt;/em&gt; to our imaginary computer, and measure its
performance at &lt;script type="math/tex"&gt; P = 99\%&lt;/script&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/w1ub0bN.gif" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Well, for our imaginary software, &lt;script type="math/tex"&gt; 99\% &lt;/script&gt; of which can be
parallelized, we can expect a maximum boost of &lt;script type="math/tex"&gt; S = 100 &lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;What about a program with &lt;script type="math/tex"&gt; P = 90\% &lt;/script&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/mQhZwWP.gif" alt=""&gt;&lt;/p&gt;

&lt;p&gt;There’s that same plateau again. But this time we’re only seeing a maximum
performance boost of &lt;script type="math/tex"&gt; S = 10 &lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;By &lt;script type="math/tex"&gt; P = 50\% &lt;/script&gt;, we’re down to a program that can
only be boosted to run twice as fast no matter how much parallel processing
your machine is capable of!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Note:&lt;/strong&gt; In fact, Amdahl’s Law is not exclusive to concurrency, but
applies to &lt;em&gt;any&lt;/em&gt; speed-boosting strategy that only affects
some portion of a program.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:clusterfoo.com,2013-05-06:/quick-guides/multi-profile-bashrc/</id>
    <title type="html">Managing Multiple Computers with One bashrc/zshrc</title>
    <published>2013-05-06T04:00:00Z</published>
    <updated>2013-05-06T04:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/quick-guides/multi-profile-bashrc/"/>
    <content type="html">&lt;!-- _. --&gt;

&lt;p&gt;Here is a simple way to share the same &lt;code&gt;.bashrc&lt;/code&gt; / &lt;code&gt;.zshrc&lt;/code&gt; / &lt;code&gt;.bash_profile&lt;/code&gt;
across multiple computers, while still retaining unique settings in between
computers.&lt;/p&gt;

&lt;p&gt;Suppose you want some special setting to apply only to your laptop.&lt;/p&gt;

&lt;p&gt;First, create an empty file called &lt;code&gt;.setup_00&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch ~/.setup_00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, in your &lt;code&gt;rc&lt;/code&gt; file, add the following &lt;code&gt;if&lt;/code&gt; statement. Anything
inside that &lt;code&gt;if&lt;/code&gt; statement will only apply to your laptop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if [ -f '.setup_00' ]; then
    echo "This message only shows on my laptop!"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use this method to run any shell script uniquely on computers
that contain the &lt;code&gt;.setup_00&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;That’s it. It’s not fancy, but it works.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:clusterfoo.com,2013-04-16:/articles/rices_theorem/</id>
    <title type="html">Rice's Theorem</title>
    <published>2013-04-16T04:00:00Z</published>
    <updated>2013-04-16T04:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/articles/rices_theorem/"/>
    <content type="html">&lt;!-- _. --&gt;

&lt;p&gt;&lt;em&gt;The mathematical equations in this post require Javascript and will not
render if you are on RSS or email.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Rice’s theorem can be stated thus:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every non-trivial semantic property of a program is undecidable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we prove the theorem, let’s break down that statement:&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id="semantic-property"&gt;“Semantic Property”&lt;/h4&gt;

&lt;p&gt;A semantic property is a property of
the language, &lt;em&gt;not the machine that is computing
it&lt;/em&gt;. For example, this is a semantic property of a language:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All strings in language &lt;script type="math/tex"&gt;L&lt;/script&gt; are of the form &lt;script type="math/tex"&gt;1^n0^n&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not a semantic property:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It takes my program &lt;script type="math/tex"&gt;n&lt;/script&gt; steps to generate the first 100 strings in &lt;script type="math/tex"&gt;L&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note the importance of differentiating between a semantic property
and not:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The halting problem is actually decidable for &lt;a href="https://en.wikipedia.org/wiki/Linear_bounded_automaton"&gt;Linear Bouned Automata&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="non-trivial"&gt;“Non-Trivial”&lt;/h4&gt;

&lt;p&gt;A trivial property is a property that either all languages have or no language
has. A non-trivial property is everything else.&lt;/p&gt;

&lt;h4 id="undecidable"&gt;“Undecidable”&lt;/h4&gt;

&lt;p&gt;A program can either &lt;strong&gt;accept&lt;/strong&gt;, &lt;strong&gt;reject&lt;/strong&gt;, or &lt;strong&gt;run forever&lt;/strong&gt;. If a program
reaches an accept or reject state, we say it &lt;strong&gt;halts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are two types of programs: &lt;strong&gt;recognizers&lt;/strong&gt; and &lt;strong&gt;deciders&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A recognizer is a program that can only tell you with certainty when it has
succeeded to solve
a problem (reached the accept state). It cannot always tell you when it has
failed (if it goes into an infinite loop, there is no way to know if it’s in a
loop, or if it’s just taking very long to solve the problem).&lt;/p&gt;

&lt;p&gt;A decider is a program that always reaches either accepts or rejects. That
is, you not only know when the problem was solved, but you also know when it
was &lt;em&gt;not&lt;/em&gt; solved.&lt;/p&gt;

&lt;p&gt;A language is &lt;strong&gt;recognizable&lt;/strong&gt; if there exists at least one program that can
recognize it. For example, the following program reconizes &lt;script type="math/tex"&gt;L = \{"342"\}&lt;/script&gt;
(the language made up of only the string “342”):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read input.&lt;/li&gt;
  &lt;li&gt;If input == “342” print “accept”.&lt;/li&gt;
  &lt;li&gt;Else return to step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This program &lt;em&gt;recognizes&lt;/em&gt; &lt;script type="math/tex"&gt;L&lt;/script&gt;, but it does not &lt;em&gt;decide&lt;/em&gt; &lt;script type="math/tex"&gt;L&lt;/script&gt;: if the input is
in &lt;script type="math/tex"&gt;L&lt;/script&gt;, it accepts, but if it’s not, then it will run forever, and you will
never know whether the input was not in &lt;script type="math/tex"&gt;L&lt;/script&gt; or the program is just taking a
long time.&lt;/p&gt;

&lt;p&gt;A language is &lt;strong&gt;decidable&lt;/strong&gt; if there exists a program that can decide it. All
decidable languages are also recognizable. Here is a program that decides &lt;script type="math/tex"&gt;L&lt;/script&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read input.&lt;/li&gt;
  &lt;li&gt;If input == “342” print “accept”.&lt;/li&gt;
  &lt;li&gt;Else print “input rejected”.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h3 id="the-halting-problem"&gt;The Halting Problem&lt;/h3&gt;

&lt;p&gt;Take the following language:&lt;/p&gt;

&lt;p&gt;&lt;script type="math/tex"&gt; HALT_{ TM } = \{ \langle M, w \rangle | M &lt;/script&gt; is a program and &lt;script type="math/tex"&gt;M&lt;/script&gt; halts on
input &lt;script type="math/tex"&gt;w \} &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Remember, a program is itself just a string: any program can be written down as
a description, say an &lt;code&gt;.rb&lt;/code&gt; file, and that file can be used as an input for
another program (or itself!). So &lt;script type="math/tex"&gt;HALT_{ TM }&lt;/script&gt; is a language that consists
of all programs &lt;script type="math/tex"&gt;M&lt;/script&gt; and inputs &lt;script type="math/tex"&gt;w&lt;/script&gt; such that &lt;script type="math/tex"&gt;M&lt;/script&gt; halts on &lt;script type="math/tex"&gt;w&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;I won’t prove it in this post, but, as it turns out, &lt;script type="math/tex"&gt;HALT_{ TM }&lt;/script&gt; is
undecidable. Meaning it is not possible to write a program that decides
whether an algorithm halts.&lt;/p&gt;

&lt;p&gt;With this in mind, we can finally prove Rice’s theorem:&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="rices-theorem"&gt;Rice’s Theorem&lt;/h3&gt;

&lt;p&gt;Recall the theorem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every non-trivial semantic property of a program is undecidable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yet another way of stating this is as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The language &lt;script type="math/tex"&gt;P_{ TM }&lt;/script&gt;, described below, is undecidable:&lt;/p&gt;

  &lt;p&gt;&lt;script type="math/tex"&gt;P_{ TM } = \{ \langle M \rangle | M&lt;/script&gt; is a program and &lt;script type="math/tex"&gt;L(M)&lt;/script&gt; has
non-trivial property &lt;script type="math/tex"&gt;P \}&lt;/script&gt;&lt;/p&gt;

  &lt;p&gt;Where &lt;script type="math/tex"&gt;L(M)&lt;/script&gt; means “The language of &lt;script type="math/tex"&gt;M&lt;/script&gt;”. &lt;!-- _. --&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, for example, it is not possible to write a program &lt;script type="math/tex"&gt;R&lt;/script&gt; that takes as its
input another program &lt;script type="math/tex"&gt;M&lt;/script&gt; and decides whether the language of &lt;script type="math/tex"&gt;M&lt;/script&gt; is
regular (that is, if &lt;script type="math/tex"&gt;M&lt;/script&gt; can be simplified and represented as a finite
automation).&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="proof"&gt;Proof&lt;/h3&gt;

&lt;p&gt;We can prove Rice’s theorem by contradiction. We will show that &lt;strong&gt;if&lt;/strong&gt;
&lt;script type="math/tex"&gt;P_{ TM }&lt;/script&gt; is decidable &lt;strong&gt;then&lt;/strong&gt; so is &lt;script type="math/tex"&gt;HALT_{ TM }&lt;/script&gt;.
Since we know that &lt;script type="math/tex"&gt;HALT_{ TM }&lt;/script&gt; is
undecidable, then &lt;script type="math/tex"&gt;P_{ TM }&lt;/script&gt; must be undecidable too.&lt;/p&gt;

&lt;p&gt;Assume that &lt;script type="math/tex"&gt;P&lt;/script&gt; is some non-trivial semantic property and that
it is possible to write a program &lt;script type="math/tex"&gt;R&lt;/script&gt; that decides &lt;script type="math/tex"&gt;P_{ TM }&lt;/script&gt;. Here is
how we could solve the halting problem with that program:&lt;!-- _. --&gt;&lt;/p&gt;

&lt;p&gt;First, we write a program &lt;script type="math/tex"&gt;T&lt;/script&gt; such that &lt;script type="math/tex"&gt;\langle T \rangle &lt;/script&gt; is in &lt;script type="math/tex"&gt;P_{ TM }&lt;/script&gt;.
Because &lt;script type="math/tex"&gt;P&lt;/script&gt; is non-trivial, such a program must exist.&lt;/p&gt;

&lt;p&gt;Take input &lt;script type="math/tex"&gt;\langle M, w \rangle&lt;/script&gt; and use it to write a program &lt;script type="math/tex"&gt;M_w&lt;/script&gt;
that takes &lt;script type="math/tex"&gt;x&lt;/script&gt; as its input and does the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;script type="math/tex"&gt;M_w&lt;/script&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;script type="math/tex"&gt;M&lt;/script&gt; on input &lt;script type="math/tex"&gt;w&lt;/script&gt;. If &lt;script type="math/tex"&gt;M&lt;/script&gt; halts, move on to step 2.&lt;/li&gt;
  &lt;li&gt;Run &lt;script type="math/tex"&gt;T&lt;/script&gt; on &lt;script type="math/tex"&gt;x&lt;/script&gt;. Accept if &lt;script type="math/tex"&gt;T&lt;/script&gt; accepts, and reject if &lt;script type="math/tex"&gt;T&lt;/script&gt; rejects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s the clever part. &lt;em&gt;We don’t actually have to run &lt;script type="math/tex"&gt;M_w&lt;/script&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;All we need to know is that, if we &lt;em&gt;were&lt;/em&gt; to run &lt;script type="math/tex"&gt;M_w&lt;/script&gt;, there are two possible
outcomes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;script type="math/tex"&gt;M&lt;/script&gt; halts on input &lt;script type="math/tex"&gt;w&lt;/script&gt;, in which case &lt;script type="math/tex"&gt;M_w&lt;/script&gt; reaches step 2.&lt;/li&gt;
  &lt;li&gt;
&lt;script type="math/tex"&gt;M&lt;/script&gt; never halts and never reaches step 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But note that, if &lt;script type="math/tex"&gt;M&lt;/script&gt; halts on &lt;script type="math/tex"&gt;w&lt;/script&gt;, then step 2 is simply to run &lt;script type="math/tex"&gt;T&lt;/script&gt;, which
means that &lt;strong&gt;when &lt;script type="math/tex"&gt;M&lt;/script&gt; halts on &lt;script type="math/tex"&gt;w&lt;/script&gt;, &lt;script type="math/tex"&gt;\langle M_w \rangle&lt;/script&gt; is in &lt;script type="math/tex"&gt;P_{ TM }&lt;/script&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, if we were to run &lt;script type="math/tex"&gt;R&lt;/script&gt; with input &lt;script type="math/tex"&gt;\langle M_w \rangle&lt;/script&gt;,
it would be able to tell us whether it is in &lt;script type="math/tex"&gt;P_{ TM }&lt;/script&gt;, and that in
turn would tell us if &lt;script type="math/tex"&gt;M&lt;/script&gt; halts on &lt;script type="math/tex"&gt;w&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;But this would mean that we
could solve the halting problem, which we know  is not possible.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:clusterfoo.com,2013-03-27:/articles/ruby_fizzbuzz_by_exhaustion/</id>
    <title type="html">Fizz-Buzz by Exhaustion in Ruby</title>
    <published>2013-03-27T04:00:00Z</published>
    <updated>2013-03-27T04:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/articles/ruby_fizzbuzz_by_exhaustion/"/>
    <content type="html">&lt;!-- _. --&gt;

&lt;p&gt;Here’s a cute solution to &lt;a href="https://en.wikipedia.org/wiki/Bizz_buzz"&gt;Fizz-Buzz&lt;/a&gt;
that occurred to me when I read about the
&lt;code&gt;unless&lt;/code&gt; statement in Ruby; it uses only the unless statement.
I’m doing the Bitmaker Labs workshop, and one of the questions for the
interview was Fizz-Buzz.&lt;/p&gt;

&lt;p&gt;I call it “by exhaustion” because, instead of using &lt;code&gt;if&lt;/code&gt;-statements to look for
which terms to include, it uses &lt;code&gt;unless&lt;/code&gt;-statements to look for which terms
to exclude (until all possibilities are exhausted, in which case it just
gives up and says “Let’s just assume it’s ‘Buzz’”).&lt;/p&gt;

&lt;div class="highlighter-coderay"&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;(&lt;span style="color:#00D"&gt;1&lt;/span&gt;..&lt;span style="color:#00D"&gt;100&lt;/span&gt;).each &lt;span style="color:#080;font-weight:bold"&gt;do&lt;/span&gt; |n|
&lt;span class="line-numbers"&gt;&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;  (puts n.to_s; &lt;span style="color:#080;font-weight:bold"&gt;next&lt;/span&gt;) &lt;span style="color:#080;font-weight:bold"&gt;unless&lt;/span&gt; (n % &lt;span style="color:#00D"&gt;3&lt;/span&gt; == &lt;span style="color:#00D"&gt;0&lt;/span&gt;) &lt;span style="color:#080;font-weight:bold"&gt;or&lt;/span&gt; (n % &lt;span style="color:#00D"&gt;5&lt;/span&gt; == &lt;span style="color:#00D"&gt;0&lt;/span&gt;)
&lt;span class="line-numbers"&gt;&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;  (puts &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;Fizz&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;; &lt;span style="color:#080;font-weight:bold"&gt;next&lt;/span&gt;) &lt;span style="color:#080;font-weight:bold"&gt;unless&lt;/span&gt; (n % &lt;span style="color:#00D"&gt;5&lt;/span&gt; == &lt;span style="color:#00D"&gt;0&lt;/span&gt;) &lt;span style="color:#080;font-weight:bold"&gt;or&lt;/span&gt; (n % &lt;span style="color:#00D"&gt;3&lt;/span&gt; != &lt;span style="color:#00D"&gt;0&lt;/span&gt;)
&lt;span class="line-numbers"&gt;&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;  (puts &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;FizzBuzz&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;; &lt;span style="color:#080;font-weight:bold"&gt;next&lt;/span&gt;) &lt;span style="color:#080;font-weight:bold"&gt;unless&lt;/span&gt; (n % &lt;span style="color:#00D"&gt;3&lt;/span&gt; != &lt;span style="color:#00D"&gt;0&lt;/span&gt;)
&lt;span class="line-numbers"&gt;&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;  puts &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;Buzz&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <id>tag:clusterfoo.com,2013-03-08:/quick-guides/rsync-over-ssh/</id>
    <title type="html">Syncing with a Remote Server Using Rsync Over SSH</title>
    <published>2013-03-08T05:00:00Z</published>
    <updated>2013-03-08T05:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/quick-guides/rsync-over-ssh/"/>
    <content type="html">&lt;!-- _. --&gt;

&lt;p&gt;Rsync is a command-line utility for copying and syncing files. Rsync can be
used over ssh to sync files between remote servers. The basic command
for use over ssh is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rsync [options] -e "ssh" source target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’ve set up private and public keys to secure your ssh connection, you must
specify the location of the identity key (also known as “private key”), which
is usually found in the &lt;code&gt;~/.ssh&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rsync [options] -e "ssh -i /home/user/.ssh/private_key_file"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use rsync to deploy my blog. All of its contents are found &lt;a href="http://github.com/clusterfoo/clusterfoo-dot-com"&gt;in the &lt;code&gt;output&lt;/code&gt;
directory&lt;/a&gt;, which I sync with
a small shared server at &lt;a href="http://asmallorange.com"&gt;A Small Ornage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I use the following simple command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rsync -avh [-n] --progress --delete-after -e "ssh -i /home/username/.ssh/id_rsa" \
  output/ username@clusterfoo.com:/home/username/public_html/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;code&gt;-a&lt;/code&gt;: Archive mode. The most common option for syncing directories.&lt;/li&gt;
  &lt;li&gt;
&lt;code&gt;-v&lt;/code&gt;: Verbose mode.&lt;/li&gt;
  &lt;li&gt;
&lt;code&gt;-h&lt;/code&gt;: Human readable. Print numbers in human-readable formats.&lt;/li&gt;
  &lt;li&gt;
&lt;code&gt;-n&lt;/code&gt;: Dry run.&lt;/li&gt;
  &lt;li&gt;
&lt;code&gt;--progress&lt;/code&gt;: Show progress during transfer.&lt;/li&gt;
  &lt;li&gt;
&lt;code&gt;--delete-after&lt;/code&gt;: Sync new and updated files, and wait until transfer is
complete before deleting any superfluous files. This is important when deploying
a website, since otherwise a visitor might stumble upon missing pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="always-dry-run-first"&gt;Always Dry-Run First!&lt;/h3&gt;

&lt;p&gt;It’s easy to make mistakes with rsync. A simple typo like &lt;code&gt;dir&lt;/code&gt; instead of
&lt;code&gt;dir/&lt;/code&gt; can mean a world of difference (and a world of pain if you accidentally
&lt;code&gt;-rm&lt;/code&gt; an entire directory!).&lt;/p&gt;

&lt;p&gt;I always do a dry-run before I use an rsync command for the first time. The
dry-run option (&lt;code&gt;-n&lt;/code&gt;) will show you the final output of the operation,
without actually running through it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:clusterfoo.com,2013-02-28:/quick-guides/screencasting-in-linux/</id>
    <title type="html">Screencasting In Linux</title>
    <published>2013-02-28T05:00:00Z</published>
    <updated>2013-02-28T05:00:00Z</updated>
    <link rel="alternate" href="http://clusterfoo.com/quick-guides/screencasting-in-linux/"/>
    <content type="html">&lt;!-- i_i --&gt;

&lt;p&gt;Some quick notes on screencasting in Linux.&lt;/p&gt;

&lt;h3 id="tools-used"&gt;Tools used&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;arandr (easily manage your screens and their resolution)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;recordmydesktop (record your desktop activity)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;key-mon (display keyboard activity)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pavucontrol (GUI for managing PulseAudio volume and stuff)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;vlc (to extract OGG audio file)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;audacity (edit your audioi for proper volume levels)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;openshot (edit and export final video)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="preparation"&gt;Preparation&lt;/h3&gt;

&lt;p&gt;Using arandr, change screen resolution to 1280x720 (720p) and switch to
a large terminal font.&lt;/p&gt;

&lt;p&gt;Use pavucontrol to make sure audio levels are decent.&lt;/p&gt;

&lt;p&gt;For the actual recording, the following command gives me best results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;recordmydesktop --freq 48000 -o [path]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;CTRL-C&lt;/code&gt; when finished.&lt;/p&gt;

&lt;h3 id="exporting-for-youtube"&gt;Exporting for YouTube&lt;/h3&gt;

&lt;p&gt;I export the file as a 720p flv, using aac for audio codec.&lt;/p&gt;
</content>
  </entry>
</feed>

